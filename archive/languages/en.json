{
	"homepageTitle": "Generate Short Unique IDs",
	"whatIsSqidsBasic": "{name}{pronounced} is an open-source library that lets you generate short unique\n\t\tidentifiers from numbers. These IDs are URL-safe, can encode several numbers, and do not contain\n\t\tcommon profanity words.",
	"readMore": "Read more",
	"thisIsWhatTheyLookLike": "This is what they look like:",
	"useCases": "Use Cases",
	"theMainUse": "The main use of {name} is purely visual. If you'd like to use IDs instead of numbers in your project, {name} could be a good choice.",
	"goodFor": "Good For",
	"notGoodFor": "Not Good For",
	"encodingPrimaryKeys": "Encoding primary keys",
	"ifUsingRelationalDatabase": "If you're using a relational database",
	"savingDatabaseLookups": "Saving database lookups",
	"byEncodingMultipleObjects": "By encoding multiple objects",
	"temporaryLoginTokens": "Temporary login tokens",
	"profanityFreeUrlSafe": "Profanity-free and URL-safe",
	"sensitiveData": "Sensitive data",
	"thisIsNotEncryptionLibrary": "This is not an encryption library",
	"userIds": "User IDs",
	"canRevealUserCount": "Can reveal user count if anyone finds out the encoding alphabet",
	"faq": "FAQ",
	"playground": "Playground",
	"language": "Language",
	"features": "Features",
	"generateShortIds": "Generate short IDs from non-negative numbers",
	"easyEncodingDecoding": "Easy encoding & decoding",
	"idsDoNotContainProfanity": "Auto-generated IDs do not contain common profanity",
	"supportForCustomIdsShuffledAlphabet": "Support for custom IDs through shuffled alphabet",
	"everyVersionSameId": "Every version produces the same IDs",
	"smallLibraryPermissiveLicense": "Small library with a permissive license",
	"totalLanguagesNewDesign": "{count} programming languages ({new} using new design)",
	"getStarted": "Get started",
	"whatLanguageAreYouUsing": "What language are you using?",
	"cantFindIt": "Can't find it",
	"letUsKnowAboutIt": "Let us know about it?",
	"example": "Example",
	"alphabet": "Alphabet",
	"numbers": "Numbers",
	"generatedId": "Generated ID",
	"shuffle": "shuffle",
	"shuffleCap": "Shuffle",
	"addNew": "new",
	"issuesWithTranslationHelpTranslate": "Suggest text translation edit",
	"sponsor": "Sponsor",
	"popular": "Popular",
	"askAQuestion": "Ask a question",
	"foundABug": "Found a bug?",
	"hashidsUpgradedAndRebranded": "{name} has been upgraded & rebranded",
	"starRepoOnGithub": "Star {what} on {github}",
	"quickEncodeDecodeExample": "Quick encode & decode example:",
	"ifIdsAreTooShortYouCanPadThem": "If IDs are too short, you can pad them to a certain length:",
	"createUniqueIdsByShuffling": "Create unique IDs by shuffling the alphabet:",
	"fullDocIsAt": "Full documentation is at",
	"getStartedCap": "Get Started",
	"ifYoureLookingForOriginalHashids": "If you're looking for the original {name}, you can find it here:",
	"sqidsForLangIsNotReady": "{name} for {lang} is not yet ready.",
	"pleaseStarRepoToMoveItUp": "Please star the repo to move it up our todo list:",
	"ifYoudLikeToHelpPort": "If you'd like to help bring this version to life, there's an FAQ section on how to do that:",
	"howToPortToAnotherLang": "How to port {name} to another language?",
	"ifYoureLookingForTheOriginal": "If you're looking for the original {name} project, you can find it here:",
	"itWillNotBeCompatible": "Please note that it will not be compatible with the current algorithm once this version is done.",
	"homepageMetaDescription": "{name} is an open-source library that lets you generate short unique IDs from numbers. It supports {count} programming languages.",
	"shortUniqueIdsIn": "Short Unique IDs in {lang}",
	"repoMetaDescription": "Generate short unique IDs in {lang} using {name}. These identifiers are URL-safe, can encode several numbers, and do not contain common profanity words.",
	"playgroundMetaDescription": "{name} playground. Explore {name} encoding and decoding library.",
	"faqForSqids": "Frequenty Asked Questions for {name}.",
	"minLength": "Minimum Length",
	"blocklist": "Blocklist",
	"addYourOwnCustomBlocklist": "Add your own custom words separated by spacesâ€¦",
	"useTheDefaultBlocklistAsWell": "Use the default blocklist as well",
	"defaultAlphabet": "Default",
	"short": "Short",
	"long": "Long",
	"letters": "Letters",
	"lowercase": "Lowercase",
	"uppercase": "Uppercase",
	"list": "List",
	"encode": "Encode",
	"decode": "Decode",
	"encodeMultiple": "Encode a multiple",
	"encodeExtraZero": "Encode an extra zero",
	"encodeLargeConstant": "Encode a large constant",
	"id": "ID",
	"encodeTheseNumbers": "Encoding these numbers:",
	"willProduce": "Will produce:",
	"decodingThisId": "Decoding this ID:",
	"alphabetMustBeAtLeast": "Alphabet must be at least {count} characters long",
	"alphabetSpacesWillBeIgnored": "Alphabet spaces will be ignored",
	"blocklistWordsLessThanWillBeIgnored": "Blocklist words less than {count} characters long will be ignored",
	"block": "block",
	"general": "General",
	"whatIsItGoodFor": "What is it good for?",
	"whatIsItNotGoodFor": "What is it not good for?",
	"canEncodeSeveralNumbersAtOnce": "Can I encode several numbers at once?",
	"areGeneratedIdsUnique": "Are generated IDs unique?",
	"whatLimitationsDoesSqidsHave": "What limitations does {name} have?",
	"contribute": "Contribute",
	"gotchas": "Gotchas",
	"padding": "Padding",
	"howCanIMakeMyIdsUnique": "How can I make my IDs unique?",
	"howCanIShuffleTheDefaultAlphabet": "How can I shuffle the default alphabet?",
	"shorterOrLongerAlphabet": "Is it better to use a shorter or longer alphabet?",
	"canAlphabetConsistOfNumbers": "Can my alphabet consist of only numbers?",
	"canUseEmojisAsAlphabet": "Can I use emojis as the alphabet?",
	"whyPadIds": "Why pad IDs?",
	"canIMakeGeneratedIdsLonger": "Can I make generated IDs longer?",
	"canIMakeGeneratedIdsSpecificLength": "Can I make generated IDs a specific length?",
	"whyUseABlocklist": "Why use a blocklist?",
	"howDoesTheBlocklistWork": "How does the blocklist work?",
	"whatWordsAreInBlocklist": "What words are in the default blocklist?",
	"whatHappensWhenAllIdsBlocked": "What happens when all IDs are blocked?",
	"howToCheckIfIdsAreValid": "How to check if IDs are valid?",
	"whatHappensWhenDefaultBlocklistUpdates": "What happens when the default blocklist gets updated?",
	"canEncodingDifferentNumbersProduceIdenticalIds": "Can encoding different numbers produce identical IDs?",
	"whatIs": "What is {name}?",
	"whyWasHashidsUpgradedToSqids": "Why was {hashids} upgraded to {name}?",
	"whyWasSaltRemoved": "Why was the {salt} parameter removed?",
	"IsHashidsCompatibleWithSqids": "Is {hashids} compatible with {name}?",
	"howCanISafelyUpgrade": "How can I safely upgrade from {hashids} to {name}?",
	"whereCanIFindOriginalLibraries": "Where can I find the original {hashids} libraries?",
	"howCanIContribute": "How can I contribute?",
	"howToPortSqids": "How to port {name} to another language?",
	"sqidsIsASmallOpenSourceLibrary": "{name} is a small open-source library that can produce short, unique, random-looking IDs from numbers.",
	"theBestWayToThinkAboutIt": "The best way to think about it is like a decimal-to-hexadecimal converter, but with a few extra features.",
	"forLinkShorteningAndMore": "Link shortening, generating unique event IDs for logging, generating IDs for products/objects on a website (like YouTube does for videos), generating short IDs for text messages, confirmation codes in emails, etc.",
	"anyDataThatIsNotSensitive": "Any data that's sensitive. Generated IDs are not hashes and could be decoded back into numbers. For example, they might not be a good choice for user IDs, because once decoded, they could reveal your app's user count.",
	"yesSqidsCanEncodeManyNumbers": "Yes. {name} can encode one or many non-negative numbers into a single ID. There is no limit to how many numbers you can encode, but there is a limit to how big of a number you can encode (depending on the implementation language).",
	"thisIsUsefulForSeveralReasons": "This is useful for several reasons: you could encode a UNIX timestamp and create expiring IDs, or you could encode a database shard number along with a primary key and save up on extra database queries.",
	"yesGeneratedIdsAreUnique": "Yes, generated IDs are unique to the input and the alphabet.",
	"keepInMindCase": "Keep in mind though that the default alphabet contains both uppercase and lowercase letters, so default IDs are case-sensitive.",
	"cannotEncodeNegativeNumbers": "{name} cannot encode negative numbers.",
	"minAlphabetLengthIs": "The minimum alphabet length is {length} characters.",
	"alphabetCannotContainMultibyte": "The alphabet cannot contain any multibyte characters.",
	"sqidsMinLengthLimits": "{name} cannot generate IDs up to a certain length, only at least a certain length. The minimum length parameter range is between {min} and {max}.",
	"sqidsAttemptToRegenerate": "{name} can attempt to regenerate IDs up to alphabet length, minus one.",
	"theLibraryAcceptsACustomAlphabet": "The library accepts a custom alphabet from which it can generate IDs. Simply pre-shuffle the default alphabet that's provided.",
	"somebodyCouldReverseEngineer": "Please keep in mind that given enough effort, somebody could reverse-engineer your shuffled alphabet, so this is by no means a technique to hide sensitive data.",
	"defaultAlphabetCanBeFoundHere": "The default alphabet can be found [here]({url}).",
	"youCanUseThisToShuffle": "You can use any of the online string shuffling tools or our [playground](/playground).",
	"dependsOnUsecaseAlphabetLength": "Depends on your use case. A shorter alphabet will produce longer IDs, and a longer alphabet will produce shorter IDs. You can use the [playground](/playground) to test how your IDs might look.",
	"yesCanConsistOfNumbers": "Yes. Keep in mind that generated IDs are still strings and they might start with a zero.",
	"noMultibyteCharacters": "No. {name} does not support multibyte characters for the alphabet. That includes emojis as well as many other characters.",
	"canExtendIdsWithJunk": "The library can extend IDs with junk characters to make them appear longer. This is useful so that it's not as obvious whether you're encoding a small number like {min} or a large number like {max}.",
	"decodingIsNotAffected": "Decoding is not affected.",
	"yesCanAcceptMinLengthParam": "Yes, the library accepts a minimum length parameter which guarantees that IDs will be at least that length.",
	"noGuaranteeOnIdLength": "Please note that there's no guarantee on how long your IDs will be â€” only that they will not be shorter than the length you specify.",
	"upToAPoint": "Up to a point.",
	"settingMaxLengthIsImpossible": "Setting max length is impossible because sooner or later your IDs will overflow given a big enough input. That's why only the minimum length parameter is supported, and the exact length or maximum length is not.",
	"blocklistCanPreventWordsFromAppearing": "A blocklist can prevent certain words from appearing in your IDs. This is beneficial because generated IDs are meant to appear in public places, like the URL.",
	"sqidsComesWithDefaultBlocklist": "{name} comes with the [default blocklist]({url}) that contains the most basic profanity and inappropriate words from several languages. You can of course extend that blocklist with your own words.",
	"blocklistMatchingCaseInsensitive": "Blocklist word matching is case-insensitive.",
	"blocklistShortWordsLessThan": "Short words less than 3 characters long will not be blocked. Words 3 characters long have to match IDs exactly. Words 4 characters or longer will trigger a match if they're a substring of the ID.",
	"blocklistWordsContainLeetspeak": "If blocklist words contain numbers (leetspeak), they will only trigger a match if they're at the beginning or the end of the ID.",
	"defaultBlocklistContainsTheseWords": "The default blocklist contains the most common profanity and inappropriate words from several languages. You can find the complete list [here]({url}).",
	"whenGeneratedIdMatches": "When the generated ID matches a word in the blocklist, the library attempts to regenerate it.",
	"ifEveryAttemptFails": "If every single attempt fails to regenerate the ID, the encode function will fail and return an error. Handling that error is up to the user.",
	"theBestWayToDecreaseAttempts": "The best way to decrease the number of regeneration attempts is to have a longer alphabet, not set a minimum length, and provide a smaller blocklist. Providing an empty blocklist will disable the feature completely.",
	"decodingIdsWillProduceOutput": "Decoding IDs will usually produce some kind of numeric output, but that doesn't necessarily mean that the ID is canonical. To check that the ID is valid, you can re-encode decoded numbers and check that the ID matches.",
	"theReasonItIsNotDoneAutomatically": "The reason this is not done automatically is that if the default blocklist changes in the future, we don't want to automatically invalidate the ID that has been generated in the past and might now be matching a new blocklist word.",
	"weWillBeSureToUpdateChangelog": "We will be sure to update the {changelog} when and if the default blocklist changes.",
	"youHaveToAccountForScenarios": "You have to account for scenarios where a new word might be introduced to the default blocklist. In this case, re-encoding numbers might produce a different ID.",
	"theBestWayToEnsureConsistency": "The best way to ensure your IDs stay consistent throughout future updates is to provide a custom blocklist, even if it is identical to the current default blocklist.",
	"noEncodingDifferentNumbers": "No, encoding different numbers will produce unique IDs.",
	"howeverDecodingRandomIds": "However, because of the algorithm's design, decoding random IDs can sometimes produce the same numbers. The best way to check if the ID is canonical is to simply re-encode decoded numbers and check that the ID matches.",
	"hashidsWasFirstVersion": "{hashids} was the first version of this library that came out around 2013. It also produced short IDs but used a slightly different method.",
	"hashidsHandledDifferently": "{hashids} handled a few things differently.",
	"hashidsDidNotSupportCustom": "It did not support a custom blocklist, but instead relied on the most common English profanity words. It also used the {salt} parameter to shuffle the alphabet which made it a little confusing because the library has nothing to do with encryption. Additionally, it used too many reserved characters which resulted in producing longer IDs.",
	"hashidsDecidedToUpgrade": "Therefore, we've decided to upgrade and rebrand. The algorithm has been simplified, a few features were added and the code repositories are all under [one roof now]({url}).",
	"saltParameterWasUsedToShuffle": "The {salt} parameter was used to shuffle the alphabet, and it was never meant to be associated with security or safety. Both {hashids} and {name} work similarly to the way decimal to hexadecimal conversion works but with a few adjustments. There is no encryption of any kind, so to avoid confusion, that parameter has been removed completely.",
	"noSqidsExpands": "No, {name} expands on the functionality of {hashids} and has different design goals & requirements; therefore, generated IDs are not compatible with {hashids}.",
	"sinceNoCompatibility": "Since there's no compatibility between {hashids} and {name}, it's impossible to simply replace {hashids} with {name}.",
	"howeverYouCanMerge": "However, you can merge the two by differentiating which ID belongs to which library.",
	"oneOfTheWaysToMerge": "One of the ways to do that is by ID length - if you're switching to {name}, you can provide a higher minimum length. Another way is to manually append/prepend a custom character to the newly generated IDs.",
	"finallyTryDecoding": "Finally, you could also attempt to decode an ID with {hashids} to see if it's valid. If not - decode and re-encode with {name} to see if that works.",
	"whereToFindHashids": "Each language implementation on this website links to the original {hashids} repository if it exists.",
	"appreciateStarring": "If you'd like to support the project, we'd appreciate starring our repos on Github for more visibility.",
	"contributeIfDeveloper": "If you're a developer and see no implementation of {name} for a particular language, please help us convert the library. The same goes for a programming language that is not listed.",
	"contributeIfBug": "If you see a bug in the spec or any of the implementations, please create an issue or a pull request with a suggested fix in the appropriate repository.",
	"contributeIfMultilang": "If you speak multiple languages, we could use your help with [fine-tuning the blocklist]({blocklist}) and [adjusting website translations]({i18n}) if you see any issues.",
	"contributeByGuiding": "Finally, if you have some experience with {hashids}/{name}, please help guide our community by answering any questions anyone might have.",
	"ifYouWouldLikeToPort": "If you would like to port {name} to one of the following languages (or a new one not listed here):",
	"forkTheOfficialRepo": "Fork the official repo to your own Github account & implement [the spec]({spec}) along with all the tests. You can re-use any of the existing READMEs ([example]({example})).",
	"onceLibIsCreated": "Once the library is ready, create a pull request. Once merged, we'll update the website.",
	"ifNoMaintainers": "If the repo has no active maintainers, we'd be happy to invite you to manage the repo and become an official maintainer.",
	"ifExpertAtThese": "If you're an expert at the following, please ping us if you'd like to port the library:",
	"notFound": "Not found",
	"otherLanguages": "Other languages"
}
